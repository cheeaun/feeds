{"title":"สรุปจากบทความเรื่อง Engineering For Failure","link":"https://www.somkiat.cc/summary-from-engineering-for-failure/","date":1611039873000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/back-from-fail-150x150.jpg\" class=\"attachment-post-thumbnail size-post-thumbnail wp-post-image\" alt=\"\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/01/back-from-fail-150x150.jpg 150w, https://www.somkiat.cc/wp-content/uploads/2021/01/back-from-fail-75x75.jpg 75w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></p><!-- wp:image {\"id\":21237,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/back-from-fail.jpg\" alt=\"\" class=\"wp-image-21237\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>จากบทความเรื่อง <strong><a href=\"https://medium.com/riskified-technology/engineering-for-failure-f73bc8bc2e87\" target=\"_blank\" rel=\"noreferrer noopener\">Engineering For Failure</a></strong><br>ทำการอธิบายถึงระบบงานที่มีความซับซ้อนมากขึ้น<br>แต่ละส่วนงานแยกกันทำงาน<br>ยกตัวอย่างเช่น service, database และ caching ต่าง ๆ</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><br>แน่นอนว่า การติดต่อสื่อสารกันผ่านระบบ network<br>อาจจะเกิดข้อผิดพลาดในการติดต่อสื่อสารได้<br>ดังนั้นเป็นสิ่งที่ต้องคิดและหาวิธีการจัดการ<br>เมื่อเกิดข้อผิดพลาดขึ้นมา <strong>(Design for failure)</strong></p>\n<!-- /wp:paragraph -->\n\n\n<span id=\"more-21236\"></span>\n\n\n<!-- wp:paragraph -->\n<p>ยิ่งมีส่วนงานแยกกันทำงานมากเท่าไร<br>โอกาสการเกิดข้อผิดพลาดก็มากขึ้นเท่านั้น<br>อาจจะส่งผลให้ระบบมีปัญหา <br>ทั้งทำงานช้าและประสบการณ์ที่ไม่ดีต่อผู้ใช้งาน<br>ดังนั้นมาดูกันว่า ในบทความดังกล่าวสรุปวิธีการจัดการอย่างไรไว้บ้าง</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>วิธีการที่ 1 Retrying</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>เมื่อมีปัญหาของการส่ง request ขึ้นมา<br>ก็ทำการ retry หรือพยายามส่ง request นั้นไปใหม่<br>โดยมีการกำหนด timeout ที่เหมาะสม<br>สำหรับการส่ง request ต่าง ๆ<br>เป็นวิธีการที่มักใช้กันบ่อย ๆ</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>แต่การ retry นั้นก็ก่อให้เกิดจำนวน load ที่มากขึ้นเช่นกัน<br>ยกตัวอย่างเช่น<br>ในช่วงเวลาหนึ่ง ๆ มี request ที่ fail จำนวน 10,000 request<br>นั่นหมายความว่าจะมีการ retry ใหม่อีก 10,000 request !!!<br>จะทำแบบนี้ไปเรื่อย ๆ หรือไม่นะ ?<br><br>ดังนั้นแนวทางนี้อาจจะต้องมีพร้อมกับ <strong><a rel=\"noreferrer noopener\" href=\"https://shopify.engineering/circuit-breaker-misconfigured\" target=\"_blank\">Circuit breaker</a></strong> ด้วย</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21239,\"width\":532,\"height\":263,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/fail-01.png\" alt=\"\" class=\"wp-image-21239\" width=\"532\" height=\"263\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>วิธีการที่ 2 Prefetching</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ทำการดึงข้อมูลจากระบบปลายทางมาเก็บไว้ก่อน<br>โดยทำงานแบบ background process<br>แน่นอนว่า จะไม่กระทบต่อการทำงานหลักของระบบ<br>เป็นอีกวิธีการที่แยกออกไปจากการทำงานหลักไปเลย<br><br>เหมาะสมกับการดึงข้อมูลที่ไม่เปลี่ยนแปลงหรือเปลี่ยนแปลงไม่บ่อย<br>เป็นการดึงข้อมูลที่จะใช้งานมาไว้ก่อนล่วงหน้า<br>ถ้าดีหน่อย ก็พิจารณาจากพฤติกรรมการใช้งาน</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21241,\"width\":566,\"height\":343,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/fail-02.png\" alt=\"\" class=\"wp-image-21241\" width=\"566\" height=\"343\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>วิธีการที่ 3 Best effort</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>เป็นอีกวิธีการที่ เมื่อเกิดปัญหาขึ้นมาแล้วก็จะยังทำงานต่อไป <br>ทั้ง ๆ ที่ไม่ได้รับข้อมูลจากระบบ</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21244,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/fail-03.png\" alt=\"\" class=\"wp-image-21244\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>วิธีการที่ 4 Falling back to previous or estimated results</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>เมื่อเกิดปัญหาขึ้นมาแล้ว จะทำการนำข้อมูลหรือผลการทำงานก่อนหน้ามาใช้งาน<br>หรือใช้ข้อมูลที่เหมาะสมกับเหตุการณ์นั้น ๆ มาใช้งานต่อไป</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21245,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/fail-04.png\" alt=\"\" class=\"wp-image-21245\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>วิธีการที่ 5 Delay a response</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ในบางกรณีนั้น เมื่อเกิดปัญหาแล้ว<br>ให้ทำการบันทึก request นั้น ๆ ไว้ใน messaging server หรือพวก queue <br>จากนั้นจึงทำการ process ในภายหลัง<br>และทำการส่งผลการทำงานนั้น ๆ กลับไปยัง consumer</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21247,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/fail-05.png\" alt=\"\" class=\"wp-image-21247\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>วิธีการที่ 6 Implement simplified fallback logic</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ในบางครั้ง อาจจะต้องมีการพัฒนาส่วนของ logic เพิ่มเติม<br>ในฝั่ง consumer หรือผู้เรียกใช้งาน<br>อาจจะไม่เทียบเท่าของจริง แต่ยังสามารถทำงานได้<br>เพื่อช่วยทำให้ request ต่าง ๆ ทำงานเสร็จสมบูรณ์</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21248,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/fail-06.png\" alt=\"\" class=\"wp-image-21248\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>นี่คือวิธีการที่น่าสนใจ สำหรับการจัดการเมื่อเกิดข้อผิดพลาดขึ้นมา<br>ลองนำไปใช้งานกันดูครับ<br>น่าจะพอมีประโยชน์บ้าง</p>\n<!-- /wp:paragraph -->","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"07129cc7ff5a5cf117958127c949c3aba074d9c14ce53c04a28c110e8474cea3","category":"Thai"}