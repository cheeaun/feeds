{"title":"Announcing HashiCorp Waypoint 0.2.0","link":"https://www.hashicorp.com/blog/announcing-hashicorp-waypoint-0-2-0","date":1607587200000,"content":"<p><span style=\"font-weight: 400;\">Today, we are happy to announce 0.2.0 of HashiCorp Waypoint, an open source project that provides developers a consistent workflow to build, deploy, and release applications across any platform. Waypoint enables developers to get their applications from development to production in a single file and deploy using a single command: </span><code><span style=\"font-weight: 400;\">waypoint up</span></code><span style=\"font-weight: 400;\">.</span></p><p><span style=\"font-weight: 400;\">Waypoint 0.2.0 can sync application configuration (including secrets) with external sources such as Kubernetes ConfigMaps, HashiCorp Vault, and more. The <code>waypoint.hcl</code> file can now use variables to access dynamic information about build artifacts and deploys. And there is a new family of functions for templating external files such as Dockerfiles and Kubernetes configs.</span></p><p><span style=\"font-weight: 400;\"><strong>Download and try Waypoint 0.2.0 now from the <a href=\"https://www.waypointproject.io/\">Waypoint project website</a>.</strong> Continue reading to learn more about what&rsquo;s new in this release and how these new features make it easier for you to deploy and manage your apps. </span></p><h2>Syncing Config and Secrets<br />for Your Apps</h2><p><span style=\"font-weight: 400;\">Waypoint can now configure your application via environment variables that are synced with an external system such as Kubernetes ConfigMaps, HashiCorp Vault, Amazon Parameter Store, and other systems that have a configuration source plugin available. And when these values change, your apps are automatically updated and restarted.</span></p><p><span style=\"font-weight: 400;\">Applications often expose configuration such as database URLs and ports to listen on in the form of environment variables. Prior versions of Waypoint allowed you to set these directly using the <code>waypoint config</code> CLI:</span></p><p><span style=\"font-weight: 400;\"></span></p><pre><code>$ waypoint config set DATABASE_URL=\"postgresql://example.com:5432\"</code></pre><p><span style=\"font-weight: 400;\">This method has several downsides: the value has to be known ahead of time, the value must be shared with a Waypoint user, and the value is stored on the Waypoint server. Modern applications instead often use external configuration services such as Kubernetes ConfigMaps or Amazon Parameter Store to store these values. This enables a separation of concerns and the storage of the value in a potentially more secure location.</span></p><p><span style=\"font-weight: 400;\">Now, in Waypoint 0.2, configuration values can additionally be synced with external systems. The example below shows how we can use the <code>waypoint.hcl</code>&nbsp;file to specify that the <code>DATABASE_URL</code> configuration be synced from a Kubernetes Secret instead:</span></p><pre><code>config {\n  env = {\n    DATABASE_URL = configdynamic(\"kubernetes\", {\n      name   = \"database-info\" # Secret name\n      key    = \"url\"\n      secret = true\n    })\n  }\n}</code></pre><p><span style=\"font-weight: 400;\">In the example, the </span><b>DATABASE_URL</b><span style=\"font-weight: 400;\"> environment variable will sync with the </span><b>url</b><span style=\"font-weight: 400;\"> key in the </span><b>database-info </b><span style=\"font-weight: 400;\">Kubernetes Secret. The \"sync\" actively watches the defined source, updates the environment variable whenever the value changes, and restarts your application.&nbsp;</span></p><p><span style=\"font-weight: 400;\">You can mix and match both dynamically synced and static values, along with dynamic values from multiple sources. The following example shows a blog where the theme is synced with a Kubernetes ConfigMap, the database authentication is synced with Vault, and the database address is a static value:</span></p><pre><code>project = \"blog\" \n\napp = \"web\" {\n   config {\n       env = {\n           THEME = configdynamic(\"kubernetes\", {\n               name = \"blog-config\"\n               key = \"theme\"\n           })\n\n           DATABASE_HOST = \"postgresql\"\n\n           DATABASE_USERNAME = configdynamic(\"vault\", {\n               path = \"database/postgres/blog\"\n               key = \"username\"\n           })\n\n           DATABASE_PASSWORD = configdynamic(\"vault\", {\n               path = \"database/postgres/blog\"\n               key = \"password\"\n           })\n       }\n   }\n\n   # ...\n}</code></pre><p><span style=\"font-weight: 400;\">This feature does not require any additional sidecars or cluster configuration. Configuration syncing is built directly into the Waypoint Entrypoint. This can make it significantly easier to use dynamic configuration services.</span></p><p><span style=\"font-weight: 400;\">And for multi-platform users, the above example works identically whether you're deploying to Kubernetes, Nomad, AWS ECS, or any other Waypoint-supported platform. You're able to share and access the same configuration sources anywhere.</span></p><p>Learn more about <a href=\"https://waypointproject.io/docs/app-config\"><span style=\"font-weight: 400;\">configuration syncing</span></a>.<a href=\"https://waypointproject.io/docs/app-config\"><span style=\"font-weight: 400;\"></span></a><span style=\"font-weight: 400;\"></span></p><h2>Templating and Variables</h2><p><span style=\"font-weight: 400;\">Results of prior operations such as builds and deploys are now available to future operations allowing <code>waypoint.hcl</code> configuration to be less repetitive and more dynamic. Additionally, a new family of templating functions can be used to render files such as Kubernetes Configs and Dockerfiles with access to all these variables.</span></p><p><span style=\"font-weight: 400;\">Results of prior operations such as builds and deploys are now available to future operations allowing <code>waypoint.hcl</code> configuration to be less repetitive and more dynamic. Additionally, a new family of templating functions can be used to render files such as Kubernetes Configs and Dockerfiles with access to all these variables.</span></p><p><span style=\"font-weight: 400;\">Below is a complete example combining these two features:</span></p><pre><code>app \"blog\" {\n  build {\n    use \"docker\" {\n      dockerfile = templatefile(\"${path.app}/Dockerfile.tpl\", {\n        theme = \"rainbow\"\n      })\n    }\n\n    registry {\n      use \"docker\" {\n        image = artifact.image\n        tag = gitrefpretty()\n      }\n    }\n  }\n\n  # ... \n}</code></pre><p><span style=\"font-weight: 400;\">The Docker builder uses the <code>templatefile</code> function to template the Dockerfile with the variable <code>theme</code>. The Dockerfile template is referenced using the new <code>path.app</code> variable which clearly shows the template is relative to the app directory. Then, the Docker registry step uses the <code>artifact.image</code> variable to match the image name from the build for pushing to a registry.</span></p><p><span style=\"font-weight: 400;\">This example is relatively simple, but the concept can be extended to support increasingly complex use cases. Continuing further, the deploy stage would now have access to the <code>artifact</code> variable as well and might use this while templating a directory of Kubernetes YAML files with the <code>templatedir</code> function, for example.</span></p><p><span style=\"font-weight: 400;\">Like configuration syncing, templating and variables help build the foundation for using Waypoint with all types of apps by providing support for reusability and consistency.&nbsp;</span></p><p><span style=\"font-weight: 400;\">Learn more about </span><a href=\"https://waypointproject.io/docs/waypoint-hcl/functions/template\"><span style=\"font-weight: 400;\">templating</span></a><span style=\"font-weight: 400;\"> and available </span><a href=\"https://waypointproject.io/docs/waypoint-hcl/variables\"><span style=\"font-weight: 400;\">variables</span></a><span style=\"font-weight: 400;\">.</span></p><p><span style=\"font-weight: 400;\"></span></p><h2>Other Improvements</h2><p><span style=\"font-weight: 400;\">Waypoint 0.2 contains many <a href=\"https://github.com/hashicorp/waypoint/blob/main/CHANGELOG.md#020-december-10-2020\">other improvements</a>. To highlight a few:</span></p><ul><li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><code>waypoint logs</code> now shows entrypoint-related logs. This is an important improvement to diagnose why features such as configuration syncing may not work or why your application may have failed to launch.</span></li><li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><code>waypoint exec</code> has had a number of stability issues resolved and now behaves better in non-PTY environments. <code>waypoint exec</code> has access to all configuration variables including synced values.</span></li><li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The Waypoint server now supports online backup and restore to more safely operate the server in production. This is available via API as well as the <code>waypoint server</code> CLI.</span></li></ul><p><span style=\"font-weight: 400;\"></span></p><h2>What's Next for Waypoint</h2><p><span style=\"font-weight: 400;\">We regularly update the </span><a href=\"https://www.waypointproject.io/docs/roadmap\"><span style=\"font-weight: 400;\">Waypoint roadmap</span></a><span style=\"font-weight: 400;\"> on the project&rsquo;s website with what we have planned. You can also see what we are currently working on in the project&rsquo;s milestones in GitHub. For example, we used the </span><a href=\"https://github.com/hashicorp/waypoint/milestone/3\"><span style=\"font-weight: 400;\">0.2.0 milestone</span></a><span style=\"font-weight: 400;\"> for tracking and completing the work in this release. If you have any questions or suggestions about how we can continue to improve the Waypoint project, please let us know in the </span><a href=\"https://discuss.hashicorp.com/c/waypoint/51\"><span style=\"font-weight: 400;\">Waypoint Discuss forums</span></a><span style=\"font-weight: 400;\">.</span></p><p><span style=\"font-weight: 400;\"></span></p><h2>Learn More</h2><ul><li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Try Waypoint now by following a </span><a href=\"https://learn.hashicorp.com/tutorials/waypoint/get-started-intro?in=waypoint/get-started-docker\"><span style=\"font-weight: 400;\">tutorial on HashiCorp Learn</span></a></li><li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Learn how to use </span><a href=\"https://waypointproject.io/docs/app-config\"><span style=\"font-weight: 400;\">configuration syncing</span></a><span style=\"font-weight: 400;\">, </span><a href=\"https://waypointproject.io/docs/waypoint-hcl/functions/template\"><span style=\"font-weight: 400;\">templating</span></a><span style=\"font-weight: 400;\">, and </span><a href=\"https://waypointproject.io/docs/waypoint-hcl/variables\"><span style=\"font-weight: 400;\">variables</span></a><span style=\"font-weight: 400;\"> with your apps</span></li><li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Read the 0.2.0 release notes on the </span><a href=\"https://discuss.hashicorp.com/c/waypoint/51\"><span style=\"font-weight: 400;\">Waypoint Discuss forum</span></a></li><li style=\"font-weight: 400;\"><a href=\"https://www.waypointproject.io/community\"><span style=\"font-weight: 400;\">Contribute to the Waypoint project</span></a><span style=\"font-weight: 400;\"> and participate in its community</span></li><li style=\"font-weight: 400;\"><a href=\"https://www.waypointproject.io/docs/extending-waypoint\" style=\"letter-spacing: 0px;\"><span>Extend Waypoint</span></a><span style=\"font-weight: 400;\"> by creating a plugin</span></li></ul>","author":"Mitchell Hashimoto","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"8727bac8c85b5123949a74d6b3d8539787fe90d59ec702bbd106de6a11437f56","category":"Tech"}