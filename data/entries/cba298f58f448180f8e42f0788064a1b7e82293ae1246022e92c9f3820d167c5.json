{"title":"มาดูแนวทางในการปรับปรุง Architecture ของระบบ DigitalOcean กัน","link":"https://www.somkiat.cc/refactor-architecture-from-digital-ocean/","date":1611646140000,"content":"<p><img width=\"150\" height=\"150\" src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-00-150x150.jpeg\" class=\"attachment-post-thumbnail size-post-thumbnail wp-post-image\" alt=\"\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-00-150x150.jpeg 150w, https://www.somkiat.cc/wp-content/uploads/2021/01/do-00-75x75.jpeg 75w\" sizes=\"(max-width: 150px) 100vw, 150px\" /></p><!-- wp:image {\"id\":21305,\"width\":556,\"height\":417,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-00.jpeg\" alt=\"\" class=\"wp-image-21305\" width=\"556\" height=\"417\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>จากบทความเรื่อง <strong><a href=\"https://www.digitalocean.com/blog/from-15-000-database-connections-to-under-100-digitaloceans-tale-of-tech-debt/\" target=\"_blank\" rel=\"noreferrer noopener\">From 15,000 database connections to under 100: DigitalOcean's tale of tech debt</a></strong><br>ทำการอธิบายถึง Technical Debt หรือหนี้ทางเทคนิค <br>ที่ทาง DigitalOcean ได้สร้างมันขึ้นมา<br><br><strong>แต่ว่าในช่วงแรกก็ต้องเลือกว่า เป้าหมายที่ต้องการคืออะไร</strong><br>ระหว่างการ scale business หรือ technical<br>สิ่งที่ทาง DigitalOcean เลือกคือ การ scale ทาง business ก่อน<br>แน่นอนว่า ในวันที่มีคนใช้งานเพิ่มถึงจุดหนึ่ง <br>จะทำให้หนี้ที่สร้างไว้มันส่งผลกระทบออกมา<br>จึงต้องทำการแก้ไข มาดูเรื่องราวกัน</p>\n<!-- /wp:paragraph -->\n\n\n<span id=\"more-21304\"></span>\n\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>เริ่มต้นด้วยระบบงานจะมีโครงสร้างดังรูป</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>เป็นโครงสร้างที่เรียบง่ายไม่ซับซ้อน<br>พัฒนาในส่วนของ UI และ API ด้วย Rails<br>ส่วนของ backend ที่ใช้จัดการระบบ cloud พัฒนาด้วยภาษา Perl คือส่วนของ Scheduler และ DOBE<br>การติดต่อระหว่าง UI และ Backend จะผ่าน Message Queue <br>ซึ่งใช้งานบน MySQL database<br><br><strong><em>MySQL database ทำ 2 หน้าที่คือ เก็บข้อมูล และ เป็น message broker</em></strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>ขั้นตอนการทำงานเป็นดังนี้</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>เมื่อผู้ใช้งานทำการสร้าง droplet ผ่าน UI</li><li>UI จะส่งข้อมูลการสร้างไปยัง MySQL เพื่อ insert ข้อมูล</li><li>ในฝั่ง scheduler ที่อยู่ backend จะทำการดึงข้อมูลจาก MySQL ทุก ๆ วินาที เพื่อดูว่ามีคำสั่งมาหรือไม่</li><li>ถ้าเจอก็ข้อมูลใหม่ ก็จะทำการสร้าง droplet ตามการร้องขอนั้น ๆ</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>แสดงการทำงานดังรูป</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21308,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-01-1024x545.jpeg\" alt=\"\" class=\"wp-image-21308\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>ต่อมาในฝั่ง backend ก็เริ่มนำแนวคิด Microservices มาใช้งาน</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>เปลี่ยนจาก Perl มาเป็น Go<br>ติดต่อสื่อสารภายในกันผ่าน gRPC แทนที่ HTTPS<br>ส่วนตรงกลางยังเป็น MySQL เช่นเดิม</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>เมื่อเวลาผ่านไปตั้งแต่ปี 2012-2016 นั้น</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>เพิ่ม feature ต่าง ๆ เข้ามามากมาย<br>ส่งผลให้มีจำนวนผู้ใช้งานเพิ่มมากขึ้นถึง 10,000 %<br>ผลที่ตามมาคือ จำนวน connection ไปยัง MySQL database <br>จะเท่ากับจำนวนการสร้าง droplet เลย !!<br><br>ยังไม่พอยังมีชุดคำสั่ง SQL ที่เรียกว่า ลูกอีช่าง JOIN ถึง 18 table !!<br>ยิ่งก่อให้เกิดความซับซ้อน และ load database อย่างมาก<br>ซึ่งยากต่อการ scale และ ดูแลรักษา<br>ส่งผลให้ performance ของระบบแย่ลง</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21309,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-02.jpeg\" alt=\"\" class=\"wp-image-21309\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>เมื่อมองกลับไปที่โครงสร้างที่ได้ทำกันมาแล้ว</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>พบว่าแต่ละส่วนงานผูกมัดกันมาก (Tight coupling)<br>มัน work ในช่วงเวลาหนึ่ง แต่เมื่อถึงอีกจุดหนึ่งมันไม่ work เสียแล้ว<br>แต่ละส่วนงานเกิดเป็นปัญหาคอขวดขึ้นมา<br>ดังนั้นจึงได้เวลา refactor ระบบแล้ว<br>มีเป้าหมายของการ refactor ดังนี้</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>ลดจำนวนของ database connection ลง</li><li>ปรับปรุงการทำงานของระบบ scheduler ให้มีความเสถียร</li><li>แก้ไขปัญหาเรื่องของ messaging ซึ่งดันไปใช้ MySQL database</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>การแก้ไขปัญหาในส่วนของ Backend เพื่อลดจำนวน connection มายัง database</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ด้วยการเพิ่มส่วนของ Proxy เรียกว่า Event router มาคั่นกลาง<br>แสดงดังรูป</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21311,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-03.jpeg\" alt=\"\" class=\"wp-image-21311\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>ในส่วนของ Message Queue ก็เช่นกัน นำ RabbitMQ มาใช้แทน MySQL</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>โดยใช้ MySQL เก็บข้อมูลต่าง ๆ<br>ส่วน event จากฝั่ง UI ก็ใช้ RabitMQ ซะ เพราะว่ามันเก่งเรื่องนี้กว่ามาก<br>โดยมี API layer หรือ Microservices มาจัดการ droplet service ไปเลย</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":21312,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/01/do-04-1024x523.jpeg\" alt=\"\" class=\"wp-image-21312\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph {\"customFontSize\":25} -->\n<p style=\"font-size:25px\"><strong>ส่งผลให้แต่ละส่วนงานทำงานแยกกันอย่างเป็นอิสระ</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>มีหน้าที่รับผิดชอบอย่างชัดเจน<br>เลือกใช้เครื่องมือให้เมาะกับงานนั้น ๆ และทำงานเดียวให้ดีไปเลย<br>ส่วนตรงไหนที่ก่อให้เกิดปัญหาคอขวดก็ทำการแก้ไข<br>ผลที่ตามมาคือ ระบบเอื้อต่อการ scale ของทั้ง busienss และ technical ด้วย</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><strong><em>เราได้เรียนรู้อะไรจากบทความนี้บ้าง ?</em></strong></p></blockquote>\n<!-- /wp:quote -->","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"cba298f58f448180f8e42f0788064a1b7e82293ae1246022e92c9f3820d167c5","category":"Thai"}