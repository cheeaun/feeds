{"title":"How To Migrate From WordPress To The Eleventy Static Site Generator","link":"https://smashingmagazine.com/2020/12/wordpress-eleventy-static-site-generator/","date":1607077800000,"content":"<p>Eleventy is a static site generator. We’re going to delve into why you’d want to use a static site generator, get into the nitty-gritty of converting a simple WordPress site to Eleventy, and talk about the pros and cons of managing content this way. Let’s go! </p>\n<h3>What Is A Static Site Generator?</h3>\n<p>I started my web development career decades ago in the mid-1990s when HTML and CSS were the only things you needed to get a website up and running. Those simple, static websites were fast and responsive. Fast forward to the present day, though, and a simple website can be pretty complicated. </p>\n<p>In the case of WordPress, let’s think through what it takes to render a web page. WordPress server-side PHP, running on a host’s servers, does the heavy lifting of querying a MySQL database for metadata and content, chooses the right versions of images stored on a static file system, and merges it all into a theme-based template before returning it to the browser. It’s a dynamic process for every page request, though most of the web pages I’ve seen generated by WordPress aren’t really that dynamic. Most visitors, if not all, experience identical content.</p>\n<p>Static site generators flip the model right back to that decades-old approach. Instead of assembling web pages dynamically, static site generators take content in the form of Markdown, merge it with templates, and create static web pages. This process happens outside of the request loop when users are browsing your site. All content has been pre-generated and is served lightning-fast upon each request. Web servers are quite literally doing what they advertise: serving. No database. No third-party plugins. Just pure HTML, CSS, JavaScript, and images. This simplified tech stack also equates to a smaller attack surface for hackers. There’s a little server-side infrastructure to exploit, so your site is inherently more secure.</p>\n<p>Leading static site generators are feature-rich, too, and that can make a compelling argument for bidding adieu to the tech stacks that are hallmarks of modern content management systems. </p>\n<p>If you’ve been in this industry for a while, you may remember Macromedia’s (pre-Adobe) Dreamweaver product. I loved the concept of library items and templates, specifically how they let me create consistency across multiple web pages. In the case of Eleventy, the concepts of templates, filters, shortcodes, and plugins are close analogs. I got started on this whole journey after reading about <a href=\"https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/\">Smashing’s enterprise conversion to the JamStack</a>. I also read Mathias Biilmann &amp; Phil Hawksworth’s free book called <a href=\"https://www.netlify.com/oreilly-jamstack\">Modern Web Development on the JAMstack</a> and knew I was ready to roll up my sleeves and convert something of my own. </p>\n<h3>Why Not Use A Static Site Generator?</h3>\n<p>Static site generators require a bit of a learning curve. You’re not going to be able to easily pass off editorial functions to input content, and specific use cases may preclude you from using one. Most of the work I’ll show is done in Markdown and via the command line. That said, there are many options for using static site generators in conjunction with dynamic data, e-commerce, commenting, and rating systems. </p>\n<p>You don’t have to convert your entire site over all at once, either. If you have a complicated setup, you might start small and see how you feel about static site generation before putting together a plan to solve something at an enterprise scale. You can also keep using WordPress as a best-in-class headless content management system and <a href=\"https://www.smashingmagazine.com/2020/02/headless-wordpress-site-jamstack/\">use an SSG to serve WordPress content</a>.</p>\n<h3>How I Chose Eleventy As A Static Site Generator</h3>\n<p>Do a quick search for popular static site generators and you’ll find many great options to start with: Eleventy, Gatsby, Hugo, and Jekyll were leading contenders on my list. How to choose? I did what came naturally and asked some friends. Eleventy was a clear leader in <a href=\"https://twitter.com/scottpdawson/status/1272849649636978689?s=20\">my Twitter poll</a>, but what clinched it was a comment that said \"@eleven_ty feels very approachable if one doesn’t know what one is doing.\" Hey, that’s me! I can unhappily get caught up in analysis paralysis. Not today... it felt good to choose Eleventy based on a poll and a comment. Since then, I’ve converted four WordPress sites to Eleventy, using GitHub to store the code and Netlify to securely serve the files. That’s exactly what we’re going to do today, so let’s roll up our sleeves and dive in! </p>\n<h3>Getting Started: Bootstrapping The Initial Site</h3>\n<p>Eleventy has a great collection of <a href=\"https://www.11ty.dev/docs/starter/\">starter projects</a>. We’ll use Dan Urbanowicz’s <a href=\"https://github.com/danurbanowicz/eleventy-netlify-boilerplate\">eleventy-netlify-boilerplate</a> as a starting point, advertised as a \"template for building a simple blog website with Eleventy and deploying it to Netlify. Includes Netlify CMS and Netlify Forms.\" Click \"Deploy to netlify\" to get started. You’ll be prompted to connect Netlify to GitHub, name your repository (I’m calling mine smashing-eleventy-dawson), and then \"Save &amp; Deploy.\" </p>\n<p>With that done, a few things happened: </p>\n<ol>\n<li>The boilerplate project was added to your GitHub account.</li>\n<li>Netlify assigned a dynamic name to the project, built it, and deployed it. </li>\n<li>Netlify configured the project to use Identity (if you want to use CMS features) and Forms (a simple contact form). </li>\n</ol>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2bfdfb6-c336-4ebb-9769-3fd43c8e13f2/6-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>As the screenshot suggests, you can procure or map a domain to the project, and also secure the site with HTTPS. The latter feature was a really compelling selling point for me since my host had been charging an exorbitant fee for SSL. On Netlify, it’s free.</p>\n<p>I clicked Site Settings, then Change Site Name to create a more appropriate name for my site. As much as I liked jovial-goldberg-e9f7e9, elizabeth-dawson-piano is more appropriate. After all, that’s the site we’re converting! When I visit <a href=\"elizabeth-dawson-piano.netlify.app\">elizabeth-dawson-piano.netlify.app</a>, I see the boilerplate content. Awesome!</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ce6abac-31c0-4572-bac6-3ffc369c9af1/4-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>Let’s download the new repository to our local machine so we can start customizing the site. My <a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson\">GitHub repository for this project</a> gives me the git clone command I can use in Visual Studio Code’s terminal to copy the files: </p>\n<ul>\n<li><a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson.git\">Clone git →</a></li>\n</ul>\n<p>Then we follow the remaining instructions in the <a href=\"https://github.com/danurbanowicz/eleventy-netlify-boilerplate\">boilerplate’s README file</a> to install dependencies locally, edit the <code>_data/metadata.json</code> file to match the project and run the project locally. </p>\n<ul>\n<li><code>npm install @11ty/eleventy</code></li>\n<li><code>npm install</code></li>\n<li><code>npx eleventy --serve --quiet</code></li>\n</ul>\n<p>With that last command, Eleventy launches the local development site at <code>localhost:8080</code> and starts watching for changes. </p>\n<h3>Preserving WordPress Posts, Pages, And Images</h3>\n<p>The site we’re converting from is an existing WordPress site at <a href=\"https://elizabethrdawson.wordpress.com/\">elizabethrdawson.wordpress.com</a>. Although the site is simple, it’d be great to leverage as much of that existing content as possible. Nobody really likes to copy and paste that much, right? WordPress makes it easy using its export function. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7ab9218-df69-482c-8cd3-eb1de60b1e59/5-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>Export Content gives me a zip file containing an XML extract of the site content. Export Media Library gives me a zip file of the site’s images. The site that I’ve chosen to use as a model for this exercise is a simple 3-page site, and it’s hosted on Wordpress.com. If you’re self-hosting, you can go to Tools &gt; Export to get the XML extract, but depending on your host, you may need to use FTP to download the images.</p>\n<p>If you open the XML file in your editor, it’s going to be of little use to you. We need a way to get individual posts into Markdown, which is the language we’re going to use with Eleventy. Lucky for us, there’s a <a href=\"https://github.com/lonekorean/wordpress-export-to-markdown\">package for converting WordPress posts and pages to Markdown</a>. Clone that repository to your machine and put the XML file in the same directory. Your directory listing should look something like this:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/599cfefe-9dc3-4956-bbea-b4fc631ce5ce/2-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>If you want to extract posts from the XML, this will work out of the box. However, our sample site has three pages, so we need to make a small adjustment. On line 39 of <code>parser.js</code>, change \"post\" to \"page\" before continuing.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5da57bea-6664-4aad-91ce-3cf596faebd6/8-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>Make sure you do an \"npm install\" in the <code>wordpress-export-to-markdown</code> directory, then enter \"node index.js\" and follow the prompts.</p>\n<p>That process created three files for me: <code>welcome.md</code>, <code>about.md</code>, and <code>contact.md</code>. In each, there’s <a href=\"https://www.11ty.dev/docs/data-frontmatter/\">front matter</a> that describes the page’s title and date, and the Markdown of the content extracted from the XML. ‘Front matter’ may be a new term for you, and if you look at the section at the top of the sample <code>.md</code> files in the \"pages\" directory, you’ll see a section of data at the top of the file. Eleventy supports a variety of front matter to help customize your site, and title and date are just the beginning. In the sample pages, you’ll see this in the front matter section: </p>\n<pre><code>eleventyNavigation:\n  key: Home\n  order: 0\n</code></pre>\n\n<p>Using this syntax, you can have pages automatically added to the site’s navigation. I wanted to preserve this with my new pages, so I copied and pasted the content of the pages into the existing boilerplate .md files for home, contact, and about. Our sample site won’t have a blog for now, so I’m deleting the <code>.md</code> files from the \"posts\" directory, too. Now my local preview site looks like this, so we’re getting there!</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7564edd-4897-442e-abfe-6863eadf0901/7-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>This seems like a fine time to <a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson/commit/5e58de971fcbedacfac344f6e5a05e7e3af70e16\">commit and push the updates to GitHub</a>. A few things happen when I commit updates. Upon notification from GitHub that updates were made, Netlify runs the build and updates the live site. It’s the same process that happens locally when you’re updating and saving files: Eleventy converts the Markdown files to HTML pages. In fact, if you look in your <code>_site</code> directory locally, you’ll see the HTML version of your website, ready for static serving. So, as I navigate to <a href=\"https://elizabeth-dawson-piano.netlify.app/\">elizabeth-dawson-piano.netlify.app</a> shortly after committing, I see the same updates I saw locally. </p>\n<h3>Adding Images</h3>\n<p>We’ll use images from the original site. In the <code>.eleventy.js</code> file, you’ll see that static image assets should go in the static/img folder. Each page will have a hero image, and here’s where front matter works really well. In the front matter section of each page, I’ll add a reference to the hero image: </p>\n<pre><code>hero: `/static/img/performance.jpg`\n</code></pre>\n\n<p>Eleventy keeps page layouts in the <code>_includes/layouts</code> folder. <code>base.njk</code> is used by all page types, so we’ll add this code just under the navigation since that’s where we want our hero image. </p>\n<pre><code>{% if (hero) %}\n&lt;img class=\"page-hero\" src=\"{{ hero }}\" alt=\"Hero image for {{ title }}\" /&gt;\n{% endif %}\n</code></pre>\n\n<p>I also included an image tag for the picture of Elizabeth on the About page, using a CSS class to align it and give it proper padding. Now’s a good time to <a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson/commit/a004893d4bb1e6489a0451ba8fcaee7ae7adb3b7\">commit and see exactly what changed</a>.</p>\n<h3>Embedding A YouTube Player With A Plugin</h3>\n<p>There are a few YouTube videos on the home page. Let’s use a plugin to create Youtube’s embed code automatically. <a href=\"https://www.npmjs.com/package/eleventy-plugin-youtube-embed\">eleventy-plugin-youtube-embed</a> is a great option for this. The installation instructions are pretty clear: install the package with npm and then include it in our <code>.eleventy.js</code> file. Without any further changes, those YouTube URLs are transformed into embedded players. (see <a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson/commit/65eb88a277ab9d5523fbb0a64c8495e701208181\">commit</a>)</p>\n<h3>Using Collections And Filters</h3>\n<p>We don’t need a blog for this site, but we do need a way to let people know about upcoming events. Our events — for all intents and purposes — will be just like blog posts. Each has a title, a description, and a date.</p>\n<p>There are a few steps we need to create this new collection-based page: </p>\n<ul>\n<li>Create a new <code>events.md</code> file in our pages directory. </li>\n<li>Add a few events to our posts directory. I’ve added <code>.md</code> files for a holiday concert, a spring concert, and a fall recital. </li>\n<li>Create a collection definition in <code>.eleventy.js</code> so we can treat these events as a collection. Here’s how the collection is defined: we gather all Markdown files in the posts directory and filter out anything that doesn’t have a location specified in the front matter.</li>\n</ul>\n<pre><code>eleventyConfig.addCollection(\"events\", (collection) =&gt;\n    collection.getFilteredByGlob(\"posts/*.md\").filter( post =&gt; {\n        return ( item.data.location ? post : false );\n    })\n);\n</code></pre>\n\n<ul>\n<li>Add a reference to the collection to our <code>events.md</code> file, showing each event as an entry in a table. Here’s what iterating over a collection looks like: </li>\n</ul>\n<pre><code>&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Date&lt;/th&gt;\n            &lt;th&gt;Title&lt;/th&gt;\n            &lt;th&gt;Location&lt;/th&gt;\n        &lt;/tr&gt;    \n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        {%- for post in collections.events -%}\n        &lt;tr&gt;\n            &lt;td&gt;{{ post.date }}&lt;/td&gt;\n            &lt;td&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.data.title }}&lt;/a&gt;&lt;/td&gt;\n            &lt;td&gt;{{ post.data.location }}&lt;/td&gt;\n        &lt;/tr&gt;    \n        {%- endfor -%}\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>However, our date formatting looks pretty bad.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b648eb6e-24c1-42d9-bbe0-52d57e5b9eac/3-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>Luckily, the boilerplate <code>.eleventy.js</code> file already has a filter titled readableDate. It’s easy to use filters on content in Markdown files and templates: </p>\n<pre><code>{{ post.date | readableDate }}</code></pre>\n\n<p>Now, our dates are properly formatted! <a href=\"https://www.11ty.dev/docs/filters/\">Eleventy’s filter documentation</a> goes into more depth on what filters are available in the framework, and how you can add your own. (see: <a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson/commit/1249617c82c6a79d7132756e4770398be9108480\">commit</a>)</p>\n<h3>Polishing The Site Design With CSS</h3>\n<p>Okay, so now we have a pretty solid site created. We have pages, hero images, an events list, and a contact form. We’re not constrained by the choice of any theme, so we can do whatever we want with the site’s design... the sky is the limit! It’s up to you to make your site performant, responsive, and aesthetically pleasing. I made some styling and markup changes to get things to our <a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson/commit/f45c72b22df762c8e12db03a188d6c63ec8aa114\">final commit</a>. </p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e57846-4daa-4957-8581-c2a992905841/1-wordpress-eleventy-static-site-generator.png\" /></p>\n<p>Now we can tell the world about all of our hard work. Let’s publish this site.</p>\n<h3>Publishing The Site</h3>\n<p>Oh, but wait. It’s already published! We’ve been working in this nice workflow all along, where our updates to GitHub automatically propagate to Netlify and get rebuilt into fresh, fast HTML. Updates are as easy as a git push. Netlify detects the changes from git, processes markdown into HTML, and serves the static site. When you’re done and ready for a custom domain, Netlify lets you use your existing domain for free. Visit Site Settings &gt; Domain Management for all the details, including how you can leverage Netlify’s free HTTPS certificate with your custom domain. </p>\n<h3>Advanced: Images, Contact Forms, And Content Management</h3>\n<p>This was a simple site with only a few images. You may have a more complicated site, though. <a href=\"https://docs.netlify.com/large-media/overview/#large-media-docs\">Netlify’s Large Media service</a> allows you to upload full-resolution images to GitHub, and stores a pointer to the image in Large Media. That way, your GitHub repository is not jam-packed with image data, and you can easily add markup to your site to request optimized crops and sizes of images at request time. I tried this on my own larger sites and was really happy with the responsiveness and ease of setup. </p>\n<p>Remember that contact form that was installed with our boilerplate? It just works. When you submit the contact form, you’ll see submissions in Netlify’s administration section. Select \"Forms\" for your site. You can configure Netlify to email you when you get a new form submission, and you can also add a custom confirmation page in your form’s code. Create a page in your site at <code>/contact/success</code>, for example, and then within your <code>form</code> tag (in <code>form.njk</code>), add <code>action=\"/contact/success\"</code> to redirect users there once the form has been submitted.</p>\n<p>The boilerplate also configures the site to be used with <a href=\"https://www.netlifycms.org/docs/configuration-options/\">Netlify’s content manager</a>. Configuring this to work well for a non-technical person is beyond the scope of the article, but you can define templates and have updates made in Netlify’s content manager sync back to GitHub and trigger automatic redeploys of your site. If you’re comfortable with the workflow of making updates in markdown and pushing them to GitHub, though, this capability is likely something you don’t need. </p>\n<ul>\n<li><a href=\"https://elizabeth-dawson-piano.netlify.app/\">Final Converted Website</a> (Result)</li>\n<li><a href=\"https://github.com/scottpdawson/smashing-eleventy-dawson\">GitHub Repository</a></li>\n</ul>\n<h4>Further Reading</h4>\n<p>Here are some links to resources used throughout this tutorial, and some other more advanced concepts if you want to dive deeper.</p>\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/\">How Smashing Magazine Manages Content: Migration From WordPress To JAMstack</a>,” Sarah Drasner</li>\n<li>“<a href=\"https://www.netlify.com/oreilly-jamstack\">Modern Web Development On The JAMstack</a>,” Mathias Biilmann &amp; Phil Hawksworth </li>\n<li>“<a href=\"https://www.11ty.dev/docs/\">Eleventy Is A Simpler Static Site Generator</a>,” Eleventy Docs</li>\n<li>“<a href=\"https://www.11ty.dev/docs/starter/\">Starter Projects</a>,” Eleventy Docs</li>\n<li>“<a href=\"https://docs.netlify.com/large-media/overview/#large-media-docs\">Large Media Docs</a>,” Netlify</li>\n<li>“<a href=\"https://www.netlifycms.org/docs/configuration-options/\">Configuration Options</a>,” Netlify CMS</li>\n<li>“<a href=\"https://scottpdawson.com/convert-wordpress-to-eleventy/\">12 Things I Learned After Converting WordPress Sites to Eleventy</a>,” Scott Dawson</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"e150aaabbcb86327b2b9b326da2934ce4e1138d5488d36745ecdc77832bf5d84","category":"Tech"}