{"title":"Change Management At Scale: How Terraform Helps End Out-of-Band Anti-Patterns","link":"https://www.hashicorp.com/blog/change-management-at-scale-how-terraform-helps-end-out-of-band-anti-patterns","date":1607702400000,"content":"<p><a href=\"https://www.hashicorp.com/resources/what-is-infrastructure-as-code\">Infrastructure as code</a> (IaC) has seen large adoption over the past several years; the benefits and importance within DevOps and the overall technology operating portfolio are no longer up for debate. Now that adoption has hit a critical scale and organizations have a large percentage or all of their technology portfolio managed by IaC, a few important questions arise:</p>\n<ul>\n<li><em>What happens when I need to make one change that will impact a large percentage or all of my infrastructure?</em></li>\n<li><em>I need to make an urgent security vulnerability update to 1000 accounts/resources today, how can I do that?</em></li>\n<li><em>How do I avoid out-of-band changes for my IaC managed infrastructure?</em></li>\n<li><em>We have existing ITIL change management practices. How does IaC work in our existing process?</em></li>\n<li><em>How can I easily show my Security &#x26; Auditing team that changes have the proper approval, review, and completion execution?</em></li>\n</ul>\n<p>Many organizations operating today have not put the proper best practices in place to address changes at scale and resort to “out-of-band” changes. Instead of using an IaC tool like Terraform to make the change, they make the change directly through the cloud console/operations management system, not via code. This causes “state drift” or “<a href=\"https://www.hashicorp.com/resources/how-can-i-prevent-configuration-drift\">configuration drift</a>” and, over time, can cause larger issues with infrastructure management.</p>\n<p>So what are the best practices? In this blog, I’ll show how very large organizations typically use Terraform Enterprise or Terraform Cloud for Business to make infrastructure changes at scale without resorting to out-of-band anti-patterns.</p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-1-work-toward-having-all-changes-go-through-terraform\" aria-label=\"best practice 1 work toward having all changes go through terraform permalink\">»</a><a class=\"__target-h\" id=\"best-practice-1-work-toward-having-all-changes-go-through-terraform\" aria-hidden></a>Best Practice #1: Work Toward Having All Changes Go Through Terraform</h2>\n<p>When managing infrastructure with Terraform, you can’t stop out-of-band changes and configuration drift without mandating that all changes are managed within Terraform.</p>\n<ul>\n<li>Do not allow any out-of-band changes to occur. We recommend disabling any access/controls that will allow changes to an account or resources that are managed by Terraform.</li>\n<li>If out-of-band changes are absolutely required due to current operating practices, then we recommend establishing notification/alerting systems for drift detection so changes can be identified and remediated in Terraform code or tracked as a known out-of-band management practice by the Security &#x26; Auditing team moving forward.</li>\n</ul><img src=https://www.datocms-assets.com/2885/1607472196-bestprac1.png alt=Diagram of Terraform-only infrastructure workflow><p><em>Best Practice #1 — Manage all changes with Terraform</em></p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-2-module-strategies\" aria-label=\"best practice 2 module strategies permalink\">»</a><a class=\"__target-h\" id=\"best-practice-2-module-strategies\" aria-hidden></a>Best Practice #2: Module Strategies</h2>\n<p>Use Terraform Modules to clearly define discrete areas of infrastructure management that can be standardized, centralized, and applied to manage the broader core infrastructure.</p>\n<ul>\n<li>There is an extensive amount of information available from HashiCorp and others on the creation, usage, and value of <a href=\"https://www.hashicorp.com/blog/new-guides-terraform-modules\">modules</a>.</li>\n<li>Modules allow you to make a change in one place and apply it to many thus promoting code reuse. With that architecture in mind, you will develop modules in a Producer/Consumer model to have centralized change capabilities across your environments.</li>\n</ul>\n<p><strong>Helpful hint:</strong> Use <a href=\"https://www.terraform.io/docs/configuration/version-constraints.html#best-practices\">Version Constraints</a> in Terraform code to ensure proper module lifecycle management.</p>\n<p>As depicted by the image below, with a centralized VPC Module, one change to the VPC module can be applied to “N” number of VPCs or resources.</p><img src=https://www.datocms-assets.com/2885/1607472019-bestprac2.png alt=Showing Terraform module workflow><p><em>Best Practice #2 — Terraform Modules</em></p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-3-map-your-resources\" aria-label=\"best practice 3 map your resources permalink\">»</a><a class=\"__target-h\" id=\"best-practice-3-map-your-resources\" aria-hidden></a>Best Practice #3: Map Your Resources</h2>\n<p>Clearly define and align repos, workspaces, environments, and test.</p>\n<ul>\n<li>A clearly defined mapping and consistent usage of resources is key to understanding where changes are required and the impact of those changes.</li>\n<li>Breaking down code repositories into simpler functional managed units (and using modules) eases the complexity of targeting and scoping changes pushed through your repository structure.</li>\n<li>In Terraform, aligning code repositories as best as possible to a one-to-one repo-to-workspace mapping will provide a more transparent infrastructure and better change execution audibility.</li>\n<li>There are many recommendations available for <a href=\"https://www.hashicorp.com/resources/terraform-workflow-best-practices-at-scale\">workspace</a> best practices but, as a reminder, ensuring that those workspaces are broken down into sub-application-level environments/functional operating levels ensures that changes can be tracked and tested as they are rolled out.</li>\n</ul><img src=https://www.datocms-assets.com/2885/1607472507-bestprac3.png alt=Terraform workflow with aligned  repos, workspaces, environments, and test.><p><em>Best Practice #3 — Terraform Repos, Workspaces, Environments, and Test</em></p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-4-centralized-auditing\" aria-label=\"best practice 4 centralized auditing permalink\">»</a><a class=\"__target-h\" id=\"best-practice-4-centralized-auditing\" aria-hidden></a>Best Practice #4: Centralized Auditing</h2>\n<p>Use Terraform Enterprise/Cloud for Business for centralized workflow, state management, and auditability.</p>\n<ul>\n<li>A centralized workflow, view, and <a href=\"https://www.terraform.io/docs/enterprise/admin/logging.html\">auditing</a> capability are necessary to ensure changes are happening on-time and with transparency.</li>\n<li>Terraform Enterprise/Cloud for Business centralizes the storing of all versions of state files safely and securely with access control and encryption. Centralization enables auditors to safely inspect and validate state change via the UI and <a href=\"https://www.terraform.io/docs/cloud/api/state-versions.html\">API</a>.</li>\n</ul><img src=https://www.datocms-assets.com/2885/1607472026-bestprac4.png alt=Workflow showing centralized auditing through Terraform><p><em>Best Practice #4 — Terraform Workflow, State Management, and Auditability</em></p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-5-use-a-module-registry\" aria-label=\"best practice 5 use a module registry permalink\">»</a><a class=\"__target-h\" id=\"best-practice-5-use-a-module-registry\" aria-hidden></a>Best Practice #5: Use a Module Registry</h2>\n<p>Use the Terraform Enterprise/Cloud for Business Private Module Registry (PMR) to publish modules for Consumers.</p>\n<ul>\n<li>The Private Module Registry provides a Producer/Consumer self-service approach to ensure that Terraform users are using the correct and most up-to-date modules within their deployments, and when changes are made, the changes are being made and reflected within the PMR as the single source of truth.</li>\n<li>The PMR enables module versioning, and when a large scale change needs to be made, a new module version can be<a href=\"https://learn.hashicorp.com/tutorials/terraform/module-private-registry\"> published to the PMR</a> and consumed at scale.</li>\n<li>Note: If not using the PMR you can use a generic Git module source by selecting a<a href=\"https://www.terraform.io/docs/modules/sources.html#selecting-a-revision-1\"> revision</a> by non-default branch or tag using the reference argument.</li>\n<li>Providing transparency and a single source of truth enables easy replication of changes across all required resources.</li>\n</ul><img src=https://www.datocms-assets.com/2885/1607472030-bestprac5.png alt=Terraform workflow going through the Private Module Registry><p><em>Best Practice — #5 Terraform Private Module Registry</em></p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-6-concurrency-and-transparency\" aria-label=\"best practice 6 concurrency and transparency permalink\">»</a><a class=\"__target-h\" id=\"best-practice-6-concurrency-and-transparency\" aria-hidden></a>Best Practice #6: Concurrency and Transparency</h2>\n<p>Terraform Enterprise/Cloud for Business can also help manage many changes to your infrastructure simultaneously at scale with concurrent runs.</p>\n<ul>\n<li>Terraform Enterprise/Cloud for Business can queue and process multiple <a href=\"https://www.terraform.io/docs/cloud/run/run-environment.html#concurrency-and-run-queuing\">concurrent</a> runs.</li>\n<li>Concurrency provides the capability to queue, process, and track the execution of changes with auditability.</li>\n<li>Concurrency is key to ensuring mass-scale changes are executed with transparency across hundreds to thousands of changes in a timely manner.</li>\n</ul><img src=https://www.datocms-assets.com/2885/1607472033-bestprac6.jpeg alt=Concurrent workspace deployment in Terraform Enterprise or Cloud><p><em>Best Practice #6 — Terraform Concurrent Runs</em></p>\n<h2><a class=\"__permalink-h\" href=\"#best-practice-7-policy-as-code\" aria-label=\"best practice 7 policy as code permalink\">»</a><a class=\"__target-h\" id=\"best-practice-7-policy-as-code\" aria-hidden></a>Best Practice #7: Policy as Code</h2>\n<p><a href=\"https://docs.hashicorp.com/sentinel/concepts/policy-as-code\">Policy as code</a> is becoming critical in many enterprises to automate custom rules and guardrails so that a team or organization’s infrastructure change policies are enforced without slowing operators down by days or weeks.</p>\n<ul>\n<li><a href=\"https://www.terraform.io/docs/cloud/sentinel/index.html\">Sentinel is a high-level framework and language used by Terraform Enterprise/Cloud for Business</a> to automatically inspect Terraform code in the provisioning process and enforce customizable policy as code to ensure that proper changes are being made.</li>\n<li>Sentinel can enforce that modules can only get deployed from the PMR.</li>\n<li>Sentinel can enforce that the correct versions of modules are being applied.</li>\n<li>With Sentinel compliance is enforced at the provisioning and re-provisioning stage for change compliance. There is much less risk in identifying and fixing security issues pre-provisioning vs. post-provisioning.</li>\n</ul><img src=https://www.datocms-assets.com/2885/1607472004-bestprac7.png alt=Policy as code in the Terraform workflow><p><em>Best Practice #7 — Terraform Sentinel Policy as Code</em></p>\n<h2><a class=\"__permalink-h\" href=\"#centralizing-your-workflow-through-version-control\" aria-label=\"centralizing your workflow through version control permalink\">»</a><a class=\"__target-h\" id=\"centralizing-your-workflow-through-version-control\" aria-hidden></a>Centralizing Your Workflow Through Version Control</h2>\n<p>Architecting your code and workflow are key components of change management at scale. In this new model, Git (or your version control system of choice: GitHub, Bitbucket, GitLab) becomes your change management tracking or, at a minimum, your sub-tracking system operating underneath a change initiator system such as <a href=\"https://www.hashicorp.com/blog/announcing-servicenow-integration-for-terraform-enterprise\">ServiceNow</a>.</p>\n<p>In this new “GitOps” model supported by Terraform Enterprise/Cloud, you will focus on three clear steps to support change at scale:</p>\n<ol>\n<li>Use modules to drive re-usability and best practice enforcement at scale (single-point-of-change).</li>\n<li>Use Terraform as the single point of execution for scalability and auditability.</li>\n<li>Use Sentinel to ensure that changes are being executed and that nothing can be provisioned outside of the defined organizational security profiles.</li>\n</ol>\n<p>I hope this brief introduction to change management at scale gets you thinking and researching some of these practices to make life easier.</p>","author":"Michael Fonseca","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"747e0057fc34384a0ea2ee613e9c9e5426d305f2da515fa048f1d26e5488bcbd","category":"Tech"}