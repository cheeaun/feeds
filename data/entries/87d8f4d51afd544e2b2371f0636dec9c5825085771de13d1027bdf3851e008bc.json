{"title":"New for Amazon CodeGuru – Python Support, Security Detectors, and Memory Profiling","link":"https://aws.amazon.com/blogs/aws/new-for-amazon-codeguru-python-support-security-detectors-and-memory-profiling/","date":1607470064000,"content":"<p><a href=\"https://aws.amazon.com/codeguru/\" title=\"\">Amazon CodeGuru</a> is a developer tool that helps you improve your code quality and has two main components:</p> \n<ul> \n <li style=\"padding-bottom: 0.5em;\">CodeGuru <strong>Reviewer</strong> uses program analysis and machine learning to detect potential defects that are difficult to find in your code and offers suggestions for improvement.</li> \n <li>CodeGuru <strong>Profiler</strong> collects runtime performance data from your live applications, and provides visualizations and recommendations to help you fine-tune your application performance.</li> \n</ul> \n<p>Today, I am happy to announce three new features:</p> \n<ul> \n <li style=\"padding-bottom: 0.5em;\"><strong>Python Support for CodeGuru Reviewer and Profiler (Preview)</strong> – You can now use CodeGuru to improve applications written in Python. Before this release, CodeGuru Reviewer could analyze Java code, and CodeGuru Profiler supported applications running on a Java virtual machine (JVM).</li> \n <li style=\"padding-bottom: 0.5em;\"><strong>Security Detectors for CodeGuru Reviewer</strong> – A new set of detectors for CodeGuru Reviewer to identify security vulnerabilities and check for security best practices in your Java code.</li> \n <li><strong>Memory Profiling for CodeGuru Profiler</strong> – A new visualization of memory retention per object type over time. This makes it easier to find memory leaks and optimize how your application is using memory.</li> \n</ul> \n<p>Let’s see these functionalities in more detail.</p> \n<p><span style=\"text-decoration: underline;\"><strong>Python Support for CodeGuru Reviewer and Profiler (Preview)<br /> </strong></span>Python Support for CodeGuru Reviewer is available in Preview and offers recommendations on how to improve the Python code of your applications in multiple categories such as concurrency, data structures and control flow, scientific/math operations, error handling, using the standard library, and of course AWS best practices.</p> \n<p>You can now also use CodeGuru Profiler to collect runtime performance data from your Python applications and get visualizations to help you identify how code is running on the CPU and where time is consumed. In this way, you can detect the most expensive lines of code of your application. Focusing your tuning activities on those parts helps you reduce infrastructure cost and improve application performance.</p> \n<p>Let’s see the CodeGuru Reviewer in action with some Python code. When I joined AWS eight years ago, one of the first projects I created was a <a href=\"https://www.kernel.org/doc/html/latest/filesystems/fuse.html\">Filesystem in Userspace (FUSE)</a> interface to <a href=\"https://aws.amazon.com/s3/\" title=\"\">Amazon Simple Storage Service (S3)</a> called <a href=\"https://github.com/danilop/yas3fs\">yas3fs (Yet Another S3-backed File System)</a>. It was inspired by the more popular <a href=\"https://github.com/s3fs-fuse/s3fs-fuse\">s3fs-fuse</a> project but rewritten from scratch to implement a distributed cache synchronized by <a href=\"https://aws.amazon.com/sns/\" title=\"\">Amazon Simple Notification Service (SNS)</a> notifications (now, thanks to the many contributors, it’s using <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">S3 event notifications</a>). It was also a good excuse for me to learn more about Python programming and S3. It’s a personal project that at the time was made available as open source. Today, if you need a shared file system, you can use <a href=\"https://aws.amazon.com/efs\" title=\"\">Amazon Elastic File System (EFS)</a>.</p> \n<p>In the <a href=\"https://console.aws.amazon.com/codeguru/home\">CodeGuru console</a>, I associate the yas3fs repository. You can associate repositories from <a href=\"https://github.com/\">GitHub</a>, including GitHub Enterprise Cloud and GitHub Enterprise Server, <a href=\"https://bitbucket.org\">Bitbucket</a>, or <a href=\"https://aws.amazon.com/codecommit/\" title=\"\">AWS CodeCommit</a>.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/12/03/codeguru-python-associate-repository.png\"><img class=\"aligncenter size-large wp-image-45118\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/12/03/codeguru-python-associate-repository-1024x712.png\" alt=\"\" width=\"1024\" height=\"712\" /></a></p> \n<p>After that, I can get a code review from CodeGuru in two ways:</p> \n<ul> \n <li>Automatically, when I create a pull request. This is a great way to use it as you and your team are working on a code base.</li> \n <li>Manually, creating a repository analysis to get a code review for all the code in one branch. This is useful to start using GodeGuru with an existing code base.</li> \n</ul> \n<p>Since I just associated the whole repository, I go for a full analysis and write down the branch name to review (apologies, I was still using <code>master</code> at the time, now I use <code>main</code> for new projects).</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/12/03/codeguru-python-repository-analysis.png\"><img class=\"aligncenter size-large wp-image-45119\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/12/03/codeguru-python-repository-analysis-1024x657.png\" alt=\"\" width=\"1024\" height=\"657\" /></a></p> \n<p>After a few minutes, the code review is completed, and there are 14 recommendations. Not bad, but I can definitely improve the code. Here’s a few of the recommendations I get. I was using exceptions and global variables too much at the time.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/12/03/codeguru-python-recommendations.png\"><img class=\"aligncenter size-large wp-image-45120\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/12/03/codeguru-python-recommendations-1024x584.png\" alt=\"\" width=\"1024\" height=\"584\" /></a></p> \n<p><span style=\"text-decoration: underline;\"><strong>Security Detectors for CodeGuru Reviewer<br /> </strong></span>The new CodeGuru Reviewer Security Detector uses automated reasoning to analyze all code paths and find potential security issues deep in your Java code, even ones that span multiple methods and files and that may involve multiple sequences of operations. To build this detector, we used learning and best practices from Amazon’s 20+ years of experience.</p> \n<p>The Security Detector is also identifying security vulnerabilities in the <a href=\"https://owasp.org/www-project-top-ten/\">top 10 Open Web Application Security Project (OWASP) categories</a>, such as weak hash encryption.</p> \n<p>If the security detector discovers an issue, it offers a suggested remediation along with an explanation. In this way, it’s much easier to follow security best practices for AWS APIs, such as those for <a href=\"https://aws.amazon.com/kms/\" title=\"\">AWS Key Management Service (KMS)</a> and <a href=\"https://aws.amazon.com/ec2/\" title=\"\">Amazon Elastic Compute Cloud (EC2)</a>, and for common Java cryptography and TLS/SSL libraries.</p> \n<p>With help from the security detector, security engineers can focus on architectural and application-specific security best-practices, and code reviewers can focus their attention on other improvements.</p> \n<p><span style=\"text-decoration: underline;\"><strong>Memory Profiling for CodeGuru Profiler<br /> </strong></span>For applications running on a JVM, CodeGuru Profiler can now show the <strong>Heap Summary</strong>, a consolidated view of memory retention during a time frame, tracking both overall sizes and number of objects per object type (such as <code>String</code>, <code>int</code>, <code>char[]</code>, and custom types). These metrics are presented in a timeline graph, so that you can easily spot trends and peaks of memory utilization per object type.</p> \n<p>Here are a couple of scenarios where this can help:</p> \n<p><strong>Memory Leaks</strong> – A constantly growing memory utilization curve for one or more object types may indicate a leak (intended here as unnecessary retention of memory objects by the application), possibly leading to out-of-memory errors and application crashes.</p> \n<p><strong>Memory Optimizations</strong> – Having a breakdown of memory utilization per object type is a step beyond traditional memory utilization monitoring, based solely on JVM-level metrics like total heap usage. By knowing that an unexpectedly high amount of memory has been associated with a specific object type, you can focus your analysis and optimization efforts on the parts of your application that are responsible for allocating and referencing objects of that type.</p> \n<p>For example, here is a graph showing how memory is used by a Java application over an interval of time. Apart from the total capacity available and the used space, I can see how memory is being used by some specific object types, such as <code>byte[]</code>, <code>java.lang.UUID</code>, and the entries of a <code>java.util.LinkedHashMap</code>. The continuous growth over time of the memory retained by these object types is suspicious. There is probably a memory leak I have to investigate.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/11/30/codeguru-memory-heap-graph-1.png\"><img class=\"aligncenter wp-image-44612 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/11/30/codeguru-memory-heap-graph-1-1024x388.png\" alt=\"\" width=\"1024\" height=\"388\" /></a></p> \n<p>In the table just below, I have a longer list of object types allocating memory on the heap. The first three are selected and for that reason are shown in the graph above. Here, I can inspect other object types and select them to see their memory usage over time. It looks like the three I already selected are the ones with more risk of being affected by a memory leak.</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/11/30/codeguru-memory-heap-table-1.png\"><img class=\"aligncenter wp-image-44613 size-large\" src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2020/11/30/codeguru-memory-heap-table-1-1024x383.png\" alt=\"\" width=\"1024\" height=\"383\" /></a></p> \n<p><strong><span style=\"text-decoration: underline;\">Available Now<br /> </span></strong>These new features are available today in all regions where <a href=\"https://aws.amazon.com/codeguru/\" title=\"\">Amazon CodeGuru</a> is offered. For more information, please see the <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\">AWS Regional Services table</a>.</p> \n<p>There are no <a href=\"https://aws.amazon.com/codeguru/pricing/\">pricing</a> changes for Python support, security detectors, and memory profiling. You pay for what you use without upfront fees or commitments.</p> \n<p><strong>Learn more about <a href=\"https://aws.amazon.com/codeguru/\">Amazon CodeGuru</a> and start using these new features today to improve the code quality of your applications. </strong><strong>&nbsp;</strong></p> \n<p>— <a href=\"https://twitter.com/danilop\" title=\"Danilo on Twitter\">Danilo</a></p>","author":"Danilo Poccia","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"87d8f4d51afd544e2b2371f0636dec9c5825085771de13d1027bdf3851e008bc","category":"Tech"}